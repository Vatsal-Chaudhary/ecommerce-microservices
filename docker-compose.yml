services:
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: jaat
      PG_DATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: userdb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.3
    container_name: keycloak
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_HTTP_ENABLED: 'true'
      KC_HOSTNAME_STRICT: 'false'  # Allow flexible hostname
      KC_HOSTNAME_STRICT_HTTPS: 'false'
    ports:
      - "8181:8080"
    restart: unless-stopped
    command: start-dev
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 1536M
          cpus: '1.0'
        reservations:
          memory: 768M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    volumes:
      - /home/vatsal/projects/ecom-microservices/config-server/src/main/resources/config:/config
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  eureka:
    build:
      context: ./eureka
      dockerfile: Dockerfile
    container_name: eureka
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 384M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  user-service:
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGODB_URI=${MONGODB_URI}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_UID=${KEYCLOAK_CLIENT_UID}
    ports:
      - "8082:8082"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      eureka:
        condition: service_healthy
      mongodb:
        condition: service_started
      keycloak:
        condition: service_started
      zipkin:
        condition: service_started
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 384M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  product-service:
    build:
      context: ./product
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      eureka:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_started
      zipkin:
        condition: service_started
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 384M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  order-service:
    build:
      context: ./order
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8083:8083"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      eureka:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_started
      zipkin:
        condition: service_started
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 384M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      kafka:
        condition: service_started
      order-service:
        condition: service_healthy
      zipkin:
        condition: service_started
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - ISSUER_URI=${ISSUER_URI}
      - JWKS_URI=${JWKS_URI}
    ports:
      - "8080:8080"
    depends_on:
      config-server:
        condition: service_healthy
      eureka:
        condition: service_healthy
      keycloak:
        condition: service_started
      zipkin:
        condition: service_started
      mongodb:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 384M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:alpine
    container_name: ecom_redis
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ecom_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_JVM_OPTS: "-Xmx256m"
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecom_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: ecom_zipkin
    ports:
      - "9411:9411"
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9411/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  backend:
    driver: bridge

volumes:
  postgres:
  keycloak_data:
  mongodb_data: